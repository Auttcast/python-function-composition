from ..composable import Composable as f

'''
test_1*
these tests demonstrate the performance impact of invoking compositions compared to native invocations

pytest auttcomp/testing/benchmarks.py --benchmark
pytest auttcomp/testing/benchmarks.py --benchmark-histogram

Original Composable:
-------------------------------------------------------------------------------------------------- benchmark: 8 tests --------------------------------------------------------------------------------------------------
Name (time in ns)                Min                        Max                   Mean                 StdDev                 Median                 IQR            Outliers  OPS (Kops/s)            Rounds  Iterations
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_1_native_1              96.5400 (1.0)             504.2300 (1.0)         104.1144 (1.0)          17.5880 (1.30)        101.2800 (1.0)        1.7700 (1.0)     4041;4735    9,604.8192 (1.0)       97676         100
test_1_native_2             114.2900 (1.18)            539.8500 (1.07)        123.4647 (1.19)         13.4902 (1.0)         123.1600 (1.22)       5.5400 (3.13)    1224;1410    8,099.4780 (0.84)      78927         100
test_1_native_3             144.9800 (1.50)            724.0900 (1.44)        161.1524 (1.55)         21.7650 (1.61)        159.5900 (1.58)       6.6200 (3.74)    1050;1645    6,205.3045 (0.65)      61471         100
test_1_native_4             167.7858 (1.74)          1,342.4643 (2.66)        177.1388 (1.70)         35.7062 (2.65)        173.6072 (1.71)       6.0714 (3.43)    1629;1745    5,645.2910 (0.59)     193761          28
test_1_composition_1      5,451.0019 (56.46)    10,914,491.9988 (>1000.0)   8,655.4549 (83.13)    66,014.8242 (>1000.0)   6,955.0006 (68.67)    280.0007 (158.19)    21;4467      115.5341 (0.01)      35219           1
test_1_composition_2      8,562.0013 (88.69)     1,825,274.0010 (>1000.0)  11,666.4006 (112.05)   44,042.0377 (>1000.0)  10,368.9999 (102.38)   243.9992 (137.85)    38;1652       85.7162 (0.01)      50718           1
test_1_composition_3     11,332.9988 (117.39)    2,032,986.9985 (>1000.0)  15,578.6093 (149.63)   53,174.7609 (>1000.0)  13,818.0003 (136.43)   320.2531 (180.94)    44;1360       64.1906 (0.01)      44705           1
test_1_composition_4     14,309.0001 (148.22)    2,250,074.0015 (>1000.0)  19,682.0391 (189.04)   60,926.0919 (>1000.0)  17,427.9994 (172.08)   382.9991 (216.39)    44;1396       50.8077 (0.01)      36149           1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Perf1:
------------------------------------------------------------------------------------------ benchmark: 8 tests -----------------------------------------------------------------------------------------
Name (time in ns)             Min                    Max                Mean              StdDev              Median                IQR            Outliers  OPS (Mops/s)            Rounds  Iterations
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test_1_native_1           92.2500 (1.0)         630.9700 (1.10)      98.5473 (1.0)       14.6950 (1.0)       96.7300 (1.0)       1.8000 (1.04)   1276;11933       10.1474 (1.0)      103392         100
test_1_native_2          113.5700 (1.23)        693.0299 (1.21)     120.2122 (1.22)      16.7313 (1.14)     118.3000 (1.22)      2.6800 (1.55)    1054;6176        8.3186 (0.82)      83174         100
test_1_native_3          143.2500 (1.55)        572.1500 (1.0)      155.3751 (1.58)      20.2525 (1.38)     152.5700 (1.58)      1.7300 (1.0)      916;8221        6.4360 (0.63)      65309         100
test_1_native_4          165.4099 (1.79)        651.1901 (1.14)     179.0010 (1.82)      21.4100 (1.46)     176.3400 (1.82)      7.3799 (4.27)     938;1398        5.5866 (0.55)      57711         100
test_1_composition_1     328.6666 (3.56)      4,014.1337 (7.02)     339.4376 (3.44)      69.0274 (4.70)     332.8668 (3.44)      2.0669 (1.19)   1877;29423        2.9460 (0.29)     195849          15
test_1_composition_2     381.7695 (4.14)      2,879.1535 (5.03)     394.4674 (4.00)      77.9744 (5.31)     386.8459 (4.00)      2.6915 (1.56)   1938;30617        2.5351 (0.25)     191095          13
test_1_composition_3     440.9005 (4.78)     10,103.5999 (17.66)    460.9141 (4.68)     105.1126 (7.15)     451.3000 (4.67)      7.3000 (4.22)   1749;32571        2.1696 (0.21)     199840          10
test_1_composition_4     496.0006 (5.38)      4,472.9997 (7.82)     533.4036 (5.41)     145.1105 (9.87)     504.8998 (5.22)     19.2995 (11.16)   7713;8086        1.8748 (0.18)     178127          10
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


'''

def increment(x):
    return x+1

def get_1():
    return 1

def test_1_native_1(benchmark):
    benchmark(lambda: increment(get_1()))

def test_1_native_2(benchmark):
    benchmark(lambda: increment(increment(get_1())))

def test_1_native_3(benchmark):
    benchmark(lambda: increment(increment(increment(get_1()))))

def test_1_native_4(benchmark):
    benchmark(lambda: increment(increment(increment(increment(get_1())))))

def test_1_composition_1(benchmark):
    composition = f(get_1) | f(increment)
    benchmark(lambda: composition())

def test_1_composition_2(benchmark):
    composition = f(get_1) | f(increment) | f(increment)
    benchmark(lambda: composition())

def test_1_composition_3(benchmark):
    composition = f(get_1) | f(increment) | f(increment) | f(increment)
    benchmark(lambda: composition())

def test_1_composition_4(benchmark):
    composition = f(get_1) | f(increment) | f(increment) | f(increment) | f(increment)
    benchmark(lambda: composition())
